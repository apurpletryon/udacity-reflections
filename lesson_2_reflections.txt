What happens when you initialize a repository? Why do you need to do it?
	Files and metadata about the repository are created. 

How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area contains the files you're ready to commit. The staging directory contains all files associated with your project. To preserve logical consistency of commits, you might not want to commit all files in the working directory at the same time.

How can you use the staging area to make sure you have one commit per logical change?
	Work on and test your changes in the working directory. Only add them to the staging area when you're ready to commit, then immediately commit them.

\What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Branches are useful to keep track of different versions of a program, such as different languages, features, etc, each of which you may want to present to a different set of end users.
	
How do the diagrams help you visualize the branch structure?
	The diagrams show relationships between each node, making it easier to understand which nodes are parents of the other and which are and are not reachable from other nodes.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	Merging two branches combines additions from both, while keeping out deletions made from either branch. The diagram shows that although these files started from the same base, they're now on two different paths.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Manually merges are time-consuming and error-prone. Git's auto-merge will at least identify conflects for your to resolve, and, hopefully save you time.